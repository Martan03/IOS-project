#!/bin/bash

POSIXLY_CORRECT=yes

# Shows help
function show_help() {
    echo "Welcome to MOLE by xsleza26!"
    echo "Usage:"
    echo "  mole -h"
    echo "    Displays help"
    echo "  mole [-g GROUP] FILE"
    echo "    Opens file, file opening will be assigned to the group if given"
    echo "  mole [-m] [FILTERS] [DIRECTORY]"
    echo "    Opens file from given directory (or current directory)"
    echo "    If no filters, last edited file will be opened"
    echo "  mole list [FILTERS] [DIRECTORY]"
    echo "    Lists files that were opened/edited with MOLE"
    echo "  mole secret-log [-b DATE] [-a DATE] [DIRECTORY1 [DIRECTORY2] [...]]"
    echo "    Displays a secret log"
    echo ""
    echo "FILTERS:"
    echo "  [-g GROUP1[,GROUP2][,...]"
    echo "     Group specification"
    echo "  [-a DATE]"
    echo "    Records of the opened/edited files after this date"
    echo "  [-b DATE]"
    echo "    Records of the opened/edited files before this date"
    echo "  DATE"
    echo "    In format YYYY-MM-DD"
}

# Shows invalid usage message
function show_invalid() {
    echo "Invalid usage. Type: 'mole -h' to show help"
}

# Gets default editor
# If EDITOR is set, it is used; else VISUAL; else vi
function get_editor() {
    editor="vi"
    if [ ! -z "$EDITOR" ]
    then
        editor="$EDITOR"
    elif [ ! -z "$VISUAL" ]
    then
        editor="$VISUAL"
    fi
}

# Opens file with editor chosen by get_editor function
function open_file() {
    if [ -z $1 ] || [ ! -f $1 ]
    then
        return 1
    fi

    save_usage $1 $2

    get_editor
    $editor $1
    return $?
}

function open_dir() {
    echo "Open dir not implemented"
    return 0
}

# Create file in given directory
function create_file() {
    if [ -z $1 ]
    then
        return 1
    elif [ -f "$(realpath $1)" ]
    then
        return 0
    fi

    mkdir -p "$(realpath -m "$(dirname "$1")")"
    touch "$(realpath "$1")"

    return 0
}

# Saves usage to file given by MOLE_RC variable
function save_usage() {
    echo "$1;$(date +"%Y-%m-%d_%T")-$2" >> $MOLE_RC
}

function create_log() {
    return 0
}

function parse_flags() {
    while getopts :g:ma:b: OPTION
    do
        case "${OPTION}" in
            g)
                g=$OPTARG
                ;;
            m)
                m=0
                ;;
            a)
                a=$OPTARG
                ;;
            b)
                b=$OPTARG
                ;;
            *)
                show_invalid
                exit 2
                ;;
        esac
    done
}

if [ -z $MOLE_RC ]
then
    echo "Variable MOLE_RC is not set."
    exit 1
fi
create_file $MOLE_RC

case "$1" in
    list)
        shift
        parse_flags $*
        echo "List not implemented"
        exit 0;
        ;;
    secret-log)
        shift
        echo "You found my epic secret log"
        exit 0;
        ;;
    -h)
        show_help
        exit 0
        ;;
    *)
        parse_flags $*
esac

((OPTIND--))
shift $OPTIND

# if $1 is empty, set value to '.' (current directory)
path="${1:-.}"

# mole [-m] [FILTERS] [DIRECTORY]
# Opens last edited with mole, corresponding to filters
# if m flag is set, opens most edited file
if [ -d "$(realpath "$path")" ]
then
    open_dir "$(realpath "$path")"
    exit $?
fi

if [ ! -z $m ] || [ ! -z $a ] || [ ! -z $b ]
then
    show_invalid
    exit 1
fi

# mole [-g GROUP] FILE
# Opens file, optional GROUP flag for opening to be assigned to
if [ -f "$(realpath "$path")" ]
then
    open_file "$(realpath "$path")" "$g"
    exit $?
fi

show_invalid
